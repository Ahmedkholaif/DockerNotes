
every line starts with an instruction (FROM,RUN,CMD)
then an argument to the installation

///////////////////////base image ////////////////////
writing a dockerfile == being given a computer with no os on it and being told to install a certain software


from alpine we said we want to use this image as a starting point(a kind of operating system) , alpine is A minimal Docker image based on Alpine Linux with a complete package index and only 5 MB in size!


"apk add --update redis" is not a docker command, it's an alpine command, we are telling alpine to add redis from the apk package manager, which is automatically installed with it.



/////////////////////////docker build/////////////////////////////
docker build, this is giving our dockerfile to the docker client to generate an image out of it.

The docker build command builds Docker images from a Dockerfile and a “context”. A build’s context is the set of files located in the specified PATH or URL. The build process can refer to any of the files in the context. For example, your build can use a COPY instruction to reference a file in the context.

-- $ docker build . 
//the terminal
docker build .Sending build context to Docker daemon  2.048kB 
Step 1/3 : FROM alpine /for every command we get a step//
latest: Pulling from library/alpine /it's going to look locally for the alpine, if not it's gonna pull it from the server//
9d48c3bd43c5: Pull complete 
Digest: sha256:72c42ed48c3a2db31b7dafe17d275b634664a708d901ec9fd57b1529280f01fb
Status: Downloaded newer image for alpine:latest
 ---> 961769676411
Step 2/3 : RUN apk add --update redis  ///
 ---> Running in 7b930cb156c4 /the id of the intermediate container, it'll be removed later, it's a container built out of the image we installed (alpine) //
fetch http://dl-cdn.alpinelinux.org/alpine/v3.10/main/x86_64/APKINDEX.tar.gz
fetch http://dl-cdn.alpinelinux.org/alpine/v3.10/community/x86_64/APKINDEX.tar.gz
(1/1) Installing redis (5.0.5-r0) (it then installed redis on the temp container)
Executing redis-5.0.5-r0.pre-install
Executing redis-5.0.5-r0.post-install
Executing busybox-1.30.1-r2.trigger
OK: 7 MiB in 15 packages
Removing intermediate container 7b930cb156c4 ////(here we remove the container but take a snapshot out of its file system and put it in the image with the idd6b119cc28ca )////
 ---> d6b119cc28ca   (the image we will use in step 3)
Step 3/3 : CMD ["redis-server"] //we then create a container out of the image from step 2 and run the command, we won't run it, we are just telling it that whenever you run, you should run with redis-server as your primary process//

 ---> Running in 0a1db2c337a6
Removing intermediate container 0a1db2c337a6
 ---> 73054da647e5
Successfully built 73054da647e5

to recap, in the first step we install a base image, 
in every step afterwards we look for the image created in the previous step and run the command in it, it will create a new image to be used in the next step.


